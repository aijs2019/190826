Lab: 從合成數據中訓練曲線

<Note> 本練習參考下列文件改作:
https://github.com/NoobTW/tfjs-tutorials/blob/master/tutorials/fit-curve.md




0.	閱讀下列文件，了解 TensorFlow.js 的核心概念
https://github.com/NoobTW/tfjs-tutorials/blob/master/tutorials/core-concepts.md

<Note> Lab01 ~ Lab08 是各節內容的程式範例。




1.	問題發想


1.1	瀏覽器連接到下列網址:
	https://www.desmos.com/calculator


1.2	在左側那欄輸入下列方程式並按下 <Enter> 鍵:
	y = a * x ^ 3 + b * x ^ 2 + c * x + d


1.3	將 a, b, c, d 分別改成:
	a = -0.8, b = -0.2, c = 0.9, d = 0.5


1.4	檢視 TrainingData.txt，檔案內容的各筆 x, y 內容，
	均符合上述方程式。


1.5	如果，利用 TrainingData.txt 的那些資料，
	有辦法以機器學習讓電腦找出正確的 a,b,c,d 分別是多少嗎?



2.	以 TensorFlow.js 從合成數據中訓練曲線

2.0	建立一個新的 HTML 文件，檔名: lab.html，內容如下:

<html>
<head>
    <title>Lab</title>
    <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@0.12.0"></script>
    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
</head>
<body>
    <div id="chart_div" style="width: 600px; height: 400px;"></div>
    <div id="debug"></div>

    <script>

        function generateData(numPoints, coeff, sigma = 0.04) {
            return tf.tidy(() => {
                const [a, b, c, d] = [
                    tf.scalar(coeff.a), tf.scalar(coeff.b), tf.scalar(coeff.c),
                    tf.scalar(coeff.d)
                ];

                const xs = tf.randomUniform([numPoints], -1, 1);

                // Generate polynomial data
                const three = tf.scalar(3, 'int32');
                const ys = a.mul(xs.pow(three))
                    .add(b.mul(xs.square()))
                    .add(c.mul(xs))
                    .add(d)
                    // Add random noise to the generated data
                    // to make the problem a bit more interesting
                    .add(tf.randomNormal([numPoints], 0, sigma));

                // Normalize the y values to the range 0 to 1.
                const ymin = ys.min();
                const ymax = ys.max();
                const yrange = ymax.sub(ymin);
                const ysNormalized = ys.sub(ymin).div(yrange);

                return {
                    xs,
                    ys: ysNormalized
                };
            })
        }

        const trueCoefficients = { a: -.8, b: -.2, c: .9, d: .5 };
        const trainingData = generateData(100, trueCoefficients);
        const xvals = trainingData.xs.dataSync();
        const yvals = trainingData.ys.dataSync();
        const values = Array.from(yvals).map((y, i) => {
            return [xvals[i], yvals[i]];
        });
        values.unshift(['X', 'Y'])

        google.charts.load('current', { 'packages': ['corechart'] });
        google.charts.setOnLoadCallback(drawChart);

        function drawChart() {
            var data = google.visualization.arrayToDataTable(values);

            var options = {
                title: 'Training Data',
                hAxis: { title: 'X', minValue: 0, maxValue: 1 },
                vAxis: { title: 'Y', minValue: 0, maxValue: 1 },
                legend: 'none'
            };

            var chart = new google.visualization.ScatterChart(document.getElementById('chart_div'));

            chart.draw(data, options);
        }

        // Lab 程式:






    </script>
</body>
</html>


<Note>	本練習的後續程式，請寫作於 // Lab 程式: 之後

<Note>	請在瀏覽器確定程式運作正常:
		網頁會有一張圖表，各點的位置符合上述步驟 1.3 的方程式。

<Question>
a. generateData() 的作用是什麼?
b. 如何轉出 Tensor 的內容到 JavaScript 陣列?
c. 陣列的 from(), map() 的作用是什麼?


2.1	閱讀下列文件之「第一步：設置變數」，並且完成程式。
	https://github.com/NoobTW/tfjs-tutorials/blob/master/tutorials/fit-curve.md

        const a = tf.variable(tf.scalar(Math.random()));
        const b = tf.variable(tf.scalar(Math.random()));
        const c = tf.variable(tf.scalar(Math.random()));
        const d = tf.variable(tf.scalar(Math.random()));

<Question>
如何將 a, b, c, d 的值顯示於 debug 那個 div?


2.2	閱讀下列文件之「第二步：建立模型」，並且完成程式。
	https://github.com/NoobTW/tfjs-tutorials/blob/master/tutorials/fit-curve.md

        function predict(x) {
            // y = a * x ^ 3 + b * x ^ 2 + c * x + d
            return tf.tidy(() => {
                return a.mul(x.pow(tf.scalar(3))) // a * x^3
                    .add(b.mul(x.square())) // + b * x ^ 2
                    .add(c.mul(x)) // + c * x
                    .add(d); // + d
            });
        }


2.3	閱讀下列文件之「第三步：訓練模型」，並且完成程式。
	https://github.com/NoobTW/tfjs-tutorials/blob/master/tutorials/fit-curve.md

        function loss(predictions, labels) {
            // 用預測結果減掉實際值（label），平方並取得平均。
            const meanSquareError = predictions.sub(labels).square().mean();
            return meanSquareError;
        }

        function train(xs, ys, numIterations = 75) {

            const learningRate = 0.5;
            const optimizer = tf.train.sgd(learningRate);

            for (let iter = 0; iter < numIterations; iter++) {
                optimizer.minimize(() => {
                    const predsYs = predict(xs);
                    return loss(predsYs, ys);
                });
            }
        }

<Question>
你能敘述 predict()、loss()、tf.train.sgd() 個別的作用與它們彼此的關聯嗎?


2.4	呼叫 train() 並且顯示訓練成果，將 a, b, c, d 的值顯示出來。

        train(trainingData.xs, trainingData.ys, 200);
        debug.innerHTML =
            `a=${a.dataSync()[0]}<br>
             b=${b.dataSync()[0]}<br>
             c=${c.dataSync()[0]}<br>
             d=${d.dataSync()[0]}<br>`;
